/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package charbol;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Raul
 */
public class Chat extends javax.swing.JFrame {
    private static String textoEntrada;
    private static String textoSalida;
    public static String nom;
    public static String correo;
    public static int edad;
    public static int peso;
    private static String aMinusculas;
    private static ArbolDir objDir = new ArbolDir();
    private static ReadJson respuesta = new ReadJson();
    private static ArrayList arregloSalida = new ArrayList();
    //Variables para llenado de jsons con registros de .txt
    private static Arbol obj= new Arbol();
    private static CreateJson objMenu = new CreateJson();
    private static CreateJson objNecesitoDoctor = new CreateJson();
    private static CreateJson objAtencionMedica = new CreateJson();
    private static CreateJson objCentroDiagnostico = new CreateJson();
    private static CreateJson objSeguroIndividual = new CreateJson();
    private static CreateJson objCotizar = new CreateJson();
    private static String DirObjMenu = "Menu.json";
    private static String DirObjNecesitoDoctor = "NecesitoDoctor.json";
    private static String DirObjAtencionMedica = "AtencionMedica.json";
    private static String DirObjCentroDiagnostico = "CentroDiagnostico.json";
    private static String DirObjSeguraIndividual = "SeguroIndividual.json";
    private static String DirObjCotizar = "Cotizar.json";
    
    /**
     * Creates new form Chat
     */
    public Chat() {
        initComponents();
        alInicio();
        this.getContentPane().setBackground(Color.DARK_GRAY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtChatResponse = new javax.swing.JTextArea();
        txtChatEntry = new javax.swing.JTextField();
        btnBackToMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1500, 1500));
        setMinimumSize(new java.awt.Dimension(139, 91));
        setPreferredSize(new java.awt.Dimension(982, 500));
        setResizable(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        txtChatResponse.setColumns(20);
        txtChatResponse.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        txtChatResponse.setLineWrap(true);
        txtChatResponse.setRows(5);
        txtChatResponse.setWrapStyleWord(true);
        txtChatResponse.setPreferredSize(new java.awt.Dimension(500, 600));
        jScrollPane1.setViewportView(txtChatResponse);

        txtChatEntry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtChatEntryKeyPressed(evt);
            }
        });

        btnBackToMenu.setBackground(new java.awt.Color(153, 0, 102));
        btnBackToMenu.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        btnBackToMenu.setForeground(new java.awt.Color(255, 255, 255));
        btnBackToMenu.setText("Salir del Chat");
        btnBackToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
                    .addComponent(txtChatEntry)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnBackToMenu)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtChatEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnBackToMenu)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtChatEntryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChatEntryKeyPressed
        // TODO add your handling code here:
        //Envio de entrada para procesar
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            evaluarPrimero();
            busarArbol();
        }
    }//GEN-LAST:event_txtChatEntryKeyPressed
    private void busarArbol(){
        //System.out.println("Ha presionado enter!");
            
            //######################################################
            textoEntrada = txtChatEntry.getText();
            aMinusculas = textoEntrada.toLowerCase();
            txtChatResponse.append("Cliente -> "+textoEntrada+"\n");
            txtChatEntry.setText("");
            //######################################################
            //Testing
            Dir();
            System.out.println("****");
            mostrarDir();
            System.out.println("****");
            
            //String otroTexto = "hola que tal";
            //##############################################
            //Este es mi textoSalida
            textoSalida = posibleSalida(aMinusculas);
            if(textoSalida.isEmpty()){
                bot("No cuento con la información referente a "
                        + "->"+textoEntrada+"-<"+", Por favor revisa tu sintaxis o elije la opcion correcta, gracias!");
            }else{
                bot(textoSalida);
            }
            //##############################################
            
            //Testing
            mostrarPosibleSalida();
            System.out.println("++++++");
            System.out.println(textoSalida);
            System.out.println("++++++");
            
            //Testing 
            //Saludo inicial
            /*if(textoEntrada.contains("buen dia")){//buscar la manera que omita las mayusculas y las tíldes
                bot("Hola muy buen día en que puedo ayudarle");
            }
            //Determina que objeto del arbol toma
            if(textoEntrada.contains("seguro")){
                //Aca va una variable String v1 = MetodoBuscarEnArbol("");
                bot("Le comentamos que tenemos los seguros siguientes: ");//insertamos v1
            }*/
            
            //##########################
            //bot(textoSalida);
            //##########################
    }
    private void btnBackToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMenuActionPerformed
        // TODO add your handling code here:
        System.exit(0);
      
    }//GEN-LAST:event_btnBackToMenuActionPerformed
     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat().setVisible(true);
            }
        });
    }
    
    private void evaluarPrimero(){
        String data;
            data = txtChatEntry.getText();
            String dataMinuscula = data.toLowerCase();
            if(data.equals("salir")){
                System.exit(0);
            }

    }
    
    private void alInicio(){
        this.setTitle(nom+"*"+correo+"*"+edad+"*"+peso);
        //###########################
        txtChatEntry.requestFocus();
        //###########################
        
        String MsjInicial = "Bienvenido "+nom+" al centro de información seguros G7, te invitamos a consultar nuestras opciones:   \n*Necesito un Doctor *Seguro Individual *Menu Principal\n";
        txtChatResponse.append(MsjInicial);
        //############################################
        llenadoJson("Menu.txt",objMenu,DirObjMenu,obj);
        obj.agregarNodo(15, objMenu);
        llenadoJson("NecesitoDoctor.txt",objNecesitoDoctor,DirObjNecesitoDoctor,obj);
        obj.agregarNodo(6, objNecesitoDoctor);
        llenadoJson("AtencionMedica.txt",objAtencionMedica,DirObjAtencionMedica,obj);
        obj.agregarNodo(4, objAtencionMedica);
        llenadoJson("CentroDiagnostico.txt",objCentroDiagnostico,DirObjCentroDiagnostico,obj);
        obj.agregarNodo(10, objCentroDiagnostico);
        llenadoJson("SeguroIndividual.txt",objSeguroIndividual,DirObjSeguraIndividual,obj);
        obj.agregarNodo(20, objSeguroIndividual);
        llenadoJson("Cotizar.txt",objCotizar,DirObjCotizar,obj);
        obj.agregarNodo(22, objCotizar);
        //############################################

        //###########################################
        objDir.agregarNodo(15, DirObjMenu);
        objDir.agregarNodo(6, DirObjNecesitoDoctor);
        objDir.agregarNodo(4, DirObjAtencionMedica);
        objDir.agregarNodo(10, DirObjCentroDiagnostico);
        objDir.agregarNodo(20, DirObjSeguraIndividual);
        objDir.agregarNodo(22, DirObjCotizar);
        //###########################################
        
        //Testing
        System.out.println("Jsons en arbol:");
        recorridoInOrden();
        System.out.println("DirJsons en arbolDir:");
        recorridoPreOrden();
    }
    
    private void bot(String text){
        txtChatResponse.append("Agente -> "+text+"\n");
    }
    //Metodo para testing
    private void Dir(){
        if(!objDir.verificarVacio()){
            objDir.buscarDir(objDir.getRaiz());
        }else{
            JOptionPane.showMessageDialog(null, "El arbol esta vacío!");
        }
    }
    //Metodo para testing
    private void mostrarDir(){
        objDir.getDirecciones().forEach((direc)->System.out.println(direc));
        
    }
    
    //Metodo indispensable
    private String posibleSalida(String textoEntrante){
        String textoSaliente = "";
        String texto="";
        for (int i = 0; i < objDir.getDirecciones().size(); i++) {
                texto = respuesta.getRedParser(objDir.getDirecciones().get(i).toString(), textoEntrante);
                arregloSalida.add(texto);
                if(texto!=null){
                    textoSaliente = texto;
                }
        }
        return textoSaliente;
    }
    //Metodo testing
    private void mostrarPosibleSalida(){
        arregloSalida.forEach((direc)->System.out.println(direc));
    }
    //Metodo testing recorrigo de los jsons en el arbol
    public static void recorridoInOrden(){
        if(!obj.verificarVacio()){
            obj.inOrden(obj.getRaiz());
        }else{
            JOptionPane.showMessageDialog(null, "El arbol esta vacío");
        }
    }
    //Metodo testing recorrido de las direcciones de los jsons en arbolDir
    public static void recorridoPreOrden(){
        if(!objDir.verificarVacio()){
            objDir.preOrden(objDir.getRaiz());
        }else{
            JOptionPane.showMessageDialog(null, "El arbol esta vacío!");
        }
    }
    //Metodo indispensable
    public static void llenadoJson(String dirTxt,CreateJson objJson,String dirJson,Arbol obj){
        File archivo;
        FileReader leer;
        BufferedReader almacenamiento;
        String cadena;
        String pQuestion="";
        String pAnswer="";
        
        archivo = new File(dirTxt);
        
        try {
            leer = new FileReader(archivo);
            almacenamiento = new BufferedReader(leer);
            cadena="";
            while(cadena!=null){
                try {
                    cadena = almacenamiento.readLine();
                    pQuestion = cadena;
                    cadena = almacenamiento.readLine();
                    pAnswer = cadena;
                    if(cadena!=null){
                        objJson.setObj(pQuestion, pAnswer);
                        objJson.FlushFile(dirJson);
                        //obj.agregarNodo(nodo, objJson);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
            try {
                almacenamiento.close();
                leer.close();
            } catch (IOException ex) {
                Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackToMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtChatEntry;
    private javax.swing.JTextArea txtChatResponse;
    // End of variables declaration//GEN-END:variables
}
